snippet im "import"
	import (
		"${1:package}"
	)
	${0:${VISUAL}}
snippet type "type T struct { ... }"
	type ${1:data} struct { ${0} }
	${0:${VISUAL}}
snippet main "func main()"
	func main() {
		${1}
	}
	${0:${VISUAL}}
snippet func "function"
	func ${1:funcName}(${2}) ${3:error} {
		${4}
	}
	${0:${VISUAL}}
snippet rt "return"
	return
snippet var "variables declaration"
	var (
		${1} ${2} = ${3}
	)
	${0:${VISUAL}}
snippet fl "float64"
	float64
snippet maxi "max value of int(int64)"
	${1:x} := math.MaxInt64
	${0:${VISUAL}}
snippet mini "min value of int(int64)"
	${1:x} := math.MinInt64
	${0:${VISUAL}}
snippet maxf "max value of float(float64)"
	${1:x} := math.MaxFloat64
	${0:${VISUAL}}
snippet minf "min value of float(float64)"
	${1:x} := math.SmallestNonzeroFloat64
	${0:${VISUAL}}
snippet fs "fmt.Scan(...)"
	fmt.Scan(&${1:n})
	${0:${VISUAL}}
snippet if "if ... { ... }"
	if ${1:condition} {
		${0:${VISUAL}}
	}
snippet ef " else if ... { ... }"
	else if ${1:condition} {
		${0:${VISUAL}}
	}
snippet else "else ... { ... }"
	else {
		${0:${VISUAL}}
	}
snippet ok  "if _, ok := xm[x]; ok { ... }"
	if _, ok := ${1:xm}[${2:x}]; ok {
		${0:${VISUAL}}
	}
snippet for "for ... { ... }"
	for ${1} {
		${0:${VISUAL}}
	}
snippet fori "for 0..n-1 { ... }"
	for ${1:i} := 0; $1 < ${2:n}; $1++ {
		${0:${VISUAL}}
	}
snippet forir "for n..0 { ... }"
	for ${1:i} := ${2:n - 1}; $1 >= 0; $1-- {
		${0:${VISUAL}}
	}
snippet forr "for i, v := range items { ... }"
	for ${2:i}, ${3:v} := range ${1:xs} {
		${0:${VISUAL}}
	}
snippet forri "for i := range items { ... }"
	for ${2:i} := range ${1:xs} {
		${0:${VISUAL}}
	}
snippet forrv "for _, v := range items { ... }"
	for _, ${2:v} := range ${1:xs} {
		${0:${VISUAL}}
	}
snippet cn "continue"
	continue
snippet br "break"
	break
snippet sw "switch"
	switch ${1:var} {
	case ${2:value1}:
		${3}
	case ${4:value2}:
		${5}
	default:
		${0:${VISUAL}}
	}
snippet ap "append"
	append(${1:slice}, ${0:value})
	${0:${VISUAL}}
snippet fn "fmt.Println(...)"
	fmt.Println(${1:x})
snippet ff "fmt.Printf(...)"
	fmt.Printf("%v\n", ${1:x})
